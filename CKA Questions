## Daemonsets - create a nginx pod
1) update Strategy - rolling update 2) ensure that pods are scheduled after 30 seconds one another  

## PersistentVolume - 
1) changing Reclaim poclity
2) Create a PV on node2, create a PVC and create a pod using the PVC and make sure it is scheduled on node2

## Resource quota for a namespace
1) Pod - 2) PersistentVolumentClaims 2

## Security
1) create a private key, submit CSR, Auto Approved CSR, create a role, rolebindings, Create a user wtih privilage to list pods and deployements. 
Test using kubeconfig file to make sure user can list pods and deployments. Test 

## Scheduling - node affinity, pod affinity
Pod Affinity -1)  create pod A with nginx image, ceate pod B with BB image and make sure that boths are scheduled on the same node all the time.
2) 2nd case - make sure boths pods are scheduled on node01

## Network Policies

## Static Pods

## Auding -- Enable Auditing

## Adding additional node to the cluster 

## Installng multi master with KUBEADM 

## Pod Affinity  

## Resource Quotas  - CPU and Memory 

## Objects: Quotas – pods, secret  

## Resource  usage against given quota – how to troubleshoot  

1) Check events
2) logs - pod 

## Quotas 

## Logs 

## ETCD backup and Restore 

## Multiple schedulers

## Private repository
1) Configure Private repo
2) Pull image from private repo

## Jsonpath

For a node, give me the node name, internalIP, number of cpus, taints on the node, status (Ready or not) and display in the order of cpus

Solution: kgn -o jsonpath='{.items[*] range}{.metadata.name}{"\t"}{.status.addresses[?(@.type=="InternalIP")].address}{"\t"}{.status.capacity.cpu}{"\n"}'
kgn -o jsonpath='{.items[*] range}{.metadata.name}{"\t"}{.status.addresses[?(@.type=="InternalIP")].address}{"\t"}{.status.capacity.cpu}{"\t"}{.status.conditions[?(@.type=="Ready")].status}{"\t"}{.status.conditions[?(@.type=="Ready")].type}{"\n"}
-- for custom Columns
kgn -o custom-columns=NodeName:.metadata.name,INTERNALIP:.status.addresses[?(@.type==\"InternalIP\")].address,CPUCount:.status.capacity.cpu,STATUS:.status.conditions[?(@.type==\"Ready\")].status,TAINTS:.spec.taints[*].effect

kubectl get nodes -o custom-columns=NAME:.metadata.name,INTERNALIP:.status.addresses[?(@.type==\"InternalIP\")].address,SCHEDULABLE:.spec.taints[*].effect,CPU:.status.allocatable.cpu,READY:.status.conditions[?(@.type==\"Ready\")].type,OSIMAGE:.status.nodeInfo.osImage,ARCH:.status.nodeInfo.architecture  | sort --reverse --key 4

For a pod, give me the name, namespace, image, lastTransitionTime of when the POD was ready, scheduler name, service account, time, column, lastTransitionTime when it was Ready

kgp -o custom-columns=NAME:{.metadata.name},NAMESPACE:{.metadata.namespace},SCH_NAME:{.spec.schedulerName},SA_NAME:{.spec.serviceAccountName},TIME:{.status.conditions[?(@.type==\"Ready\")].lastTransitionTime}

For a deployment, give me the Name Namespace# of replicas # of ready replicas Strategy Type POD name Image name
 
kgd -o custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace,REPLICAS:.spec.replicas,STRATEGY:.spec.strategy.type,POD_NAME:.spec.template.spec.containers[*].name,IMAGE:.spec.template.spec.containers[*].image,READY_REPLICAS:.status.readyReplicas
 

##== issue with nodes--
kgn -o jsonpath='{.items[*] range}{.metadata.name}{"\t"}{.status.addresses[?(@.type=="InternalIP")].address}{"\t"}{.status.capacity.cpu}{.status.conditions[?(@.type=="Ready")].status}{"\n"}'

